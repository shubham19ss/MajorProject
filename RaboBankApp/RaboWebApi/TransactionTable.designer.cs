#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RaboWebApi
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="RaboBank")]
	public partial class TransactionTableDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTransactionTable(TransactionTable instance);
    partial void UpdateTransactionTable(TransactionTable instance);
    partial void DeleteTransactionTable(TransactionTable instance);
    #endregion
		
		public TransactionTableDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["RaboBankConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionTableDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionTableDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionTableDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TransactionTableDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TransactionTable> TransactionTables
		{
			get
			{
				return this.GetTable<TransactionTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TransactionTable")]
	public partial class TransactionTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransactionID;
		
		private System.Nullable<int> _AccountNo;
		
		private System.DateTime _DepositDate;
		
		private System.Nullable<int> _TAmount;
		
		private string _TType;
		
		private string _Comments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(int value);
    partial void OnTransactionIDChanged();
    partial void OnAccountNoChanging(System.Nullable<int> value);
    partial void OnAccountNoChanged();
    partial void OnDepositDateChanging(System.DateTime value);
    partial void OnDepositDateChanged();
    partial void OnTAmountChanging(System.Nullable<int> value);
    partial void OnTAmountChanged();
    partial void OnTTypeChanging(string value);
    partial void OnTTypeChanged();
    partial void OnCommentsChanging(string value);
    partial void OnCommentsChanged();
    #endregion
		
		public TransactionTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNo", DbType="Int")]
		public System.Nullable<int> AccountNo
		{
			get
			{
				return this._AccountNo;
			}
			set
			{
				if ((this._AccountNo != value))
				{
					this.OnAccountNoChanging(value);
					this.SendPropertyChanging();
					this._AccountNo = value;
					this.SendPropertyChanged("AccountNo");
					this.OnAccountNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepositDate", DbType="DateTime NOT NULL")]
		public System.DateTime DepositDate
		{
			get
			{
				return this._DepositDate;
			}
			set
			{
				if ((this._DepositDate != value))
				{
					this.OnDepositDateChanging(value);
					this.SendPropertyChanging();
					this._DepositDate = value;
					this.SendPropertyChanged("DepositDate");
					this.OnDepositDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TAmount", DbType="Int")]
		public System.Nullable<int> TAmount
		{
			get
			{
				return this._TAmount;
			}
			set
			{
				if ((this._TAmount != value))
				{
					this.OnTAmountChanging(value);
					this.SendPropertyChanging();
					this._TAmount = value;
					this.SendPropertyChanged("TAmount");
					this.OnTAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TType", DbType="VarChar(20)")]
		public string TType
		{
			get
			{
				return this._TType;
			}
			set
			{
				if ((this._TType != value))
				{
					this.OnTTypeChanging(value);
					this.SendPropertyChanging();
					this._TType = value;
					this.SendPropertyChanged("TType");
					this.OnTTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comments", DbType="VarChar(MAX)")]
		public string Comments
		{
			get
			{
				return this._Comments;
			}
			set
			{
				if ((this._Comments != value))
				{
					this.OnCommentsChanging(value);
					this.SendPropertyChanging();
					this._Comments = value;
					this.SendPropertyChanged("Comments");
					this.OnCommentsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
